<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CustomStructures</name>
    </assembly>
    <members>
        <member name="T:CustomStructures.CustomList`1">
            <summary>
            Integer List
            </summary>
        </member>
        <member name="F:CustomStructures.CustomList`1.defaultSize">
            <summary>
            Default size of internal array
            </summary>
        </member>
        <member name="F:CustomStructures.CustomList`1.innerArr">
            <summary>
            Internal array
            </summary>
        </member>
        <member name="P:CustomStructures.CustomList`1.Count">
            <summary>
            Number of elements in the list
            </summary>
        </member>
        <member name="M:CustomStructures.CustomList`1.#ctor">
            <summary>
            Creates custom integer list with default size
            </summary>
        </member>
        <member name="M:CustomStructures.CustomList`1.#ctor(System.Int32)">
            <summary>
            Creates custom integer list with initial size
            </summary>
            <param name="initialSize">Initial size of the list</param>
        </member>
        <member name="M:CustomStructures.CustomList`1.Add(`0)">
            <summary>
            Method that adds element to the list
            </summary>
            <param name="element">Element to add</param>
        </member>
        <member name="M:CustomStructures.CustomList`1.AddRange(`0[])">
            <summary>
            Method that adds collection to the list
            </summary>
            <param name="list">Collection to add</param>
        </member>
        <member name="M:CustomStructures.CustomList`1.RemoveAt(System.Int32)">
            <summary>
            Removes element at current position from the list
            </summary>
            <param name="index">Index of the element to remove</param>
            <exception cref="T:System.IndexOutOfRangeException">The position is out of range</exception>
        </member>
        <member name="M:CustomStructures.CustomList`1.InsertAt(System.Int32,`0)">
            <summary>
            Insert element at given index
            </summary>
            <param name="index">position of the element</param>
            <param name="element">element to insert at index</param>
        </member>
        <member name="M:CustomStructures.CustomList`1.Contains(`0)">
            <summary>
            Check whether element exists in the list
            </summary>
            <param name="element">element to search in the list</param>
            <returns></returns>
        </member>
        <member name="M:CustomStructures.CustomList`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap two elements in the list
            </summary>
            <param name="firstIndex">first element index</param>
            <param name="secondIndex">second element index</param>
        </member>
        <member name="T:CustomStructures.CustomStack`1">
            <summary>
            Integer stack
            </summary>
        </member>
        <member name="F:CustomStructures.CustomStack`1.defaultSize">
            <summary>
            Default size of internal array
            </summary>
        </member>
        <member name="F:CustomStructures.CustomStack`1.innerArr">
            <summary>
            Internal array
            </summary>
        </member>
        <member name="P:CustomStructures.CustomStack`1.Count">
            <summary>
            Number of elements in the list
            </summary>
        </member>
        <member name="M:CustomStructures.CustomStack`1.#ctor">
            <summary>
            Creates custom integer list with default size
            </summary>
        </member>
        <member name="M:CustomStructures.CustomStack`1.Push(`0)">
            <summary>
            Pushes element to the stack
            </summary>
            <param name="element">element to push</param>
        </member>
        <member name="M:CustomStructures.CustomStack`1.Peek">
            <summary>
            Shows the last added element
            </summary>
            <returns></returns>
        </member>
        <member name="M:CustomStructures.CustomStack`1.Pop">
            <summary>
            Pops element from the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:CustomStructures.CustomStack`1.ForEach(System.Action{`0})">
            <summary>
            Method that loop all the elements in the stack
            </summary>
            <param name="action">action to do</param>
        </member>
    </members>
</doc>
